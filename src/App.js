import React, { useState, useEffect } from "react";
import Header from "./components/Header/Header";
import Stats from "./components/Stats/Stats";
import Main from "./components/Main/Main";
import Footer from "./components/Footer/Footer";
import "./hooks/useTelegram";
import axios from "axios";
import "./App.css";

const App = () => {
    const [authStatus, setAuthStatus] = useState(null); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const [telegramData, setTelegramData] = useState(null); // –°–æ—Ö—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ Telegram

    const authenticateWithServer = async (telegramData) => {
        try {
            const response = await axios.post(
                "https://8d13-2001-2020-4343-fe89-a8d3-e09b-72f1-eb4a.ngrok-free.app/bot_tg_back/api/login/index.php", // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å
                { initData: telegramData }, // –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞
                {
                    headers: {
                        "Content-Type": "application/json", // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ JSON
                    },
                }
            );

            if (response.data.ok) {
                console.log("‚úÖ Authentication successful:", response.data);
                setAuthStatus("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!");
            } else {
                console.error("‚ùå Authentication failed:", response.data.message);
                setAuthStatus(`‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ${response.data.message}`);
            }
        } catch (error) {
            if (error.response) {
                console.error("üö® Server responded with error:", error.response.data);
                setAuthStatus(`üö® –û—à–∏–±–∫–∞: ${error.response.data.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}`);
            } else if (error.request) {
                console.error("üì° No response from server:", error.request);
                setAuthStatus("üì° –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.");
            } else {
                console.error("‚öôÔ∏è Error setting up request:", error.message);
                setAuthStatus(`‚öôÔ∏è –û—à–∏–±–∫–∞: ${error.message}`);
            }
        }
    };

    useEffect(() => {
        if (window.Telegram && window.Telegram.WebApp) {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebApp –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö Telegram
            const initData = window.Telegram.WebApp.initData || "";
            console.log("Telegram Init Data:", initData);
            setTelegramData(initData);

            // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö Telegram –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            authenticateWithServer(initData);
        } else {
            console.warn("Telegram WebApp –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.");
            setAuthStatus("Telegram WebApp –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω.");
        }
    }, []);

    return (
        <div className="app">
            <Header />
            <Stats />
            <Main />
            <Footer />

            {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ */}
            {authStatus && (
                <div
                    style={{
                        marginTop: "20px",
                        padding: "10px",
                        border: "1px solid",
                        color: authStatus.includes("–£—Å–ø–µ—à–Ω—ã–π") ? "green" : "red",
                    }}
                >
                    {authStatus}
                </div>
            )}
        </div>
    );
};

export default App;
