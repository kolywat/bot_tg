import React, { useState, useEffect } from "react";
import Header from "./components/Header/Header";
import Stats from "./components/Stats/Stats";
import Main from "./components/Main/Main";
import Footer from "./components/Footer/Footer";
import "./hooks/useTelegram";
import axios from "axios";
import "./App.css";

const App = () => {
    const [authStatus, setAuthStatus] = useState(null);
    const [telegramData, setTelegramData] = useState(null); // –°–æ—Ö—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ Telegram –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

    const authenticateWithServer = async (telegramDataString) => {
        try {
            const response = await axios.post(
                "https://cors-anywhere.herokuapp.com/https://14e8-2001-2020-4343-fe89-c0f9-af62-d0f8-5a7d.ngrok-free.app/bot_tg_back/api/login/index.php",
                `Telegram-Data=${telegramDataString}`,
                {
                    headers: {
                        "Content-Type": "application/x-www-form-urlencoded",

                    },
                }
            );

            if (response.data.ok) {
                console.log("‚úÖ Authentication successful:", response.data);
                setAuthStatus("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!");
            } else {
                console.error("‚ùå Authentication failed:", response.data.message);
                setAuthStatus(`‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ${response.data.message}`);
            }
        } catch (error) {
            // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤ —Å–µ—Ç–∏ (—Å–µ—Ä–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, CORS –∏ —Ç.–¥.)
            if (error.response) {
                // –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 422, 500)
                console.error("üö® Server responded with error:", error.response.data);
                setAuthStatus(`üö® –û—à–∏–±–∫–∞: ${error.response.data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
            } else if (error.request) {
                // –ó–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –Ω–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –±—ã–ª–æ
                console.error("üì° No response from server:", error.request);
                setAuthStatus("üì° –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.");
            } else {
                // –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∑–∞–ø—Ä–æ—Å–∞
                console.error("‚öôÔ∏è Error setting up request:", error.message);
                setAuthStatus(`‚öôÔ∏è –û—à–∏–±–∫–∞: ${error.message}`);
            }
        }
    };

    useEffect(() => {
        if (window.Telegram && window.Telegram.WebApp) {
            const telegramData = window.Telegram.WebApp.initData;
            const telegramDataString = encodeURIComponent(telegramData);
            setTelegramData(telegramDataString); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            authenticateWithServer(telegramDataString);
        }
    }, []);

    return (
        <div className="app">
            <Header />
            <Stats />
            <Main />
            <Footer />

            {/* –ë–ª–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è telegramData */}
            <div className="debug-area" style={{ padding: '20px', background: '#f9f9f9', border: '1px solid #ccc', marginTop: '20px' }}>
                <h2>Telegram Init Data:</h2>
                <pre>{JSON.stringify(telegramData, null, 2)}</pre>
            </div>
            {authStatus && (
                <div
                    style={{
                        marginTop: '20px',
                        padding: '10px',
                        border: '1px solid',
                        color: authStatus.includes('–£—Å–ø–µ—à–Ω—ã–π') ? 'green' : 'red'
                    }}
                >
                    {authStatus}
                </div>
            )}
        </div>
    );
};

export default App;
